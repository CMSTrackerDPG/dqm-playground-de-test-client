# coding: utf-8

"""
    MLPlayground

    API  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PredictionRunHistograms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'run': 'int',
        'title': 'str',
        'primary_dataset': 'str',
        'entries': 'int',
        'mean': 'float',
        'rms': 'float',
        'skewness': 'float',
        'kurtosis': 'float',
        'source_data_file': 'int'
    }

    attribute_map = {
        'id': 'id',
        'run': 'run',
        'title': 'title',
        'primary_dataset': 'primary_dataset',
        'entries': 'entries',
        'mean': 'mean',
        'rms': 'rms',
        'skewness': 'skewness',
        'kurtosis': 'kurtosis',
        'source_data_file': 'source_data_file'
    }

    def __init__(self, id=None, run=None, title=None, primary_dataset=None, entries=None, mean=None, rms=None, skewness=None, kurtosis=None, source_data_file=None):  # noqa: E501
        """PredictionRunHistograms - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._run = None
        self._title = None
        self._primary_dataset = None
        self._entries = None
        self._mean = None
        self._rms = None
        self._skewness = None
        self._kurtosis = None
        self._source_data_file = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if run is not None:
            self.run = run
        self.title = title
        self.primary_dataset = primary_dataset
        if entries is not None:
            self.entries = entries
        if mean is not None:
            self.mean = mean
        if rms is not None:
            self.rms = rms
        if skewness is not None:
            self.skewness = skewness
        if kurtosis is not None:
            self.kurtosis = kurtosis
        if source_data_file is not None:
            self.source_data_file = source_data_file

    @property
    def id(self):
        """Gets the id of this PredictionRunHistograms.  # noqa: E501


        :return: The id of this PredictionRunHistograms.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PredictionRunHistograms.


        :param id: The id of this PredictionRunHistograms.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def run(self):
        """Gets the run of this PredictionRunHistograms.  # noqa: E501


        :return: The run of this PredictionRunHistograms.  # noqa: E501
        :rtype: int
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this PredictionRunHistograms.


        :param run: The run of this PredictionRunHistograms.  # noqa: E501
        :type: int
        """

        self._run = run

    @property
    def title(self):
        """Gets the title of this PredictionRunHistograms.  # noqa: E501


        :return: The title of this PredictionRunHistograms.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PredictionRunHistograms.


        :param title: The title of this PredictionRunHistograms.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def primary_dataset(self):
        """Gets the primary_dataset of this PredictionRunHistograms.  # noqa: E501


        :return: The primary_dataset of this PredictionRunHistograms.  # noqa: E501
        :rtype: str
        """
        return self._primary_dataset

    @primary_dataset.setter
    def primary_dataset(self, primary_dataset):
        """Sets the primary_dataset of this PredictionRunHistograms.


        :param primary_dataset: The primary_dataset of this PredictionRunHistograms.  # noqa: E501
        :type: str
        """
        if primary_dataset is None:
            raise ValueError("Invalid value for `primary_dataset`, must not be `None`")  # noqa: E501

        self._primary_dataset = primary_dataset

    @property
    def entries(self):
        """Gets the entries of this PredictionRunHistograms.  # noqa: E501


        :return: The entries of this PredictionRunHistograms.  # noqa: E501
        :rtype: int
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this PredictionRunHistograms.


        :param entries: The entries of this PredictionRunHistograms.  # noqa: E501
        :type: int
        """

        self._entries = entries

    @property
    def mean(self):
        """Gets the mean of this PredictionRunHistograms.  # noqa: E501


        :return: The mean of this PredictionRunHistograms.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this PredictionRunHistograms.


        :param mean: The mean of this PredictionRunHistograms.  # noqa: E501
        :type: float
        """

        self._mean = mean

    @property
    def rms(self):
        """Gets the rms of this PredictionRunHistograms.  # noqa: E501


        :return: The rms of this PredictionRunHistograms.  # noqa: E501
        :rtype: float
        """
        return self._rms

    @rms.setter
    def rms(self, rms):
        """Sets the rms of this PredictionRunHistograms.


        :param rms: The rms of this PredictionRunHistograms.  # noqa: E501
        :type: float
        """

        self._rms = rms

    @property
    def skewness(self):
        """Gets the skewness of this PredictionRunHistograms.  # noqa: E501


        :return: The skewness of this PredictionRunHistograms.  # noqa: E501
        :rtype: float
        """
        return self._skewness

    @skewness.setter
    def skewness(self, skewness):
        """Sets the skewness of this PredictionRunHistograms.


        :param skewness: The skewness of this PredictionRunHistograms.  # noqa: E501
        :type: float
        """

        self._skewness = skewness

    @property
    def kurtosis(self):
        """Gets the kurtosis of this PredictionRunHistograms.  # noqa: E501


        :return: The kurtosis of this PredictionRunHistograms.  # noqa: E501
        :rtype: float
        """
        return self._kurtosis

    @kurtosis.setter
    def kurtosis(self, kurtosis):
        """Sets the kurtosis of this PredictionRunHistograms.


        :param kurtosis: The kurtosis of this PredictionRunHistograms.  # noqa: E501
        :type: float
        """

        self._kurtosis = kurtosis

    @property
    def source_data_file(self):
        """Gets the source_data_file of this PredictionRunHistograms.  # noqa: E501

        Source data file that the specific Histogram was read from, if any  # noqa: E501

        :return: The source_data_file of this PredictionRunHistograms.  # noqa: E501
        :rtype: int
        """
        return self._source_data_file

    @source_data_file.setter
    def source_data_file(self, source_data_file):
        """Sets the source_data_file of this PredictionRunHistograms.

        Source data file that the specific Histogram was read from, if any  # noqa: E501

        :param source_data_file: The source_data_file of this PredictionRunHistograms.  # noqa: E501
        :type: int
        """

        self._source_data_file = source_data_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredictionRunHistograms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictionRunHistograms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
