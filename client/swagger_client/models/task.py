# coding: utf-8

"""
    MLPlayground

    API  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'training_runs': 'list[TaskTrainingRuns]',
        'testing_runs': 'list[TaskTrainingRuns]',
        'training_lumisections': 'list[TaskTrainingLumisections]',
        'testing_lumisections': 'list[TaskTrainingLumisections]',
        'name': 'str',
        'metadata': 'str',
        'created': 'datetime',
        'modified': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'training_runs': 'training_runs',
        'testing_runs': 'testing_runs',
        'training_lumisections': 'training_lumisections',
        'testing_lumisections': 'testing_lumisections',
        'name': 'name',
        'metadata': 'metadata',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, id=None, training_runs=None, testing_runs=None, training_lumisections=None, testing_lumisections=None, name=None, metadata=None, created=None, modified=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._training_runs = None
        self._testing_runs = None
        self._training_lumisections = None
        self._testing_lumisections = None
        self._name = None
        self._metadata = None
        self._created = None
        self._modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.training_runs = training_runs
        self.testing_runs = testing_runs
        self.training_lumisections = training_lumisections
        self.testing_lumisections = testing_lumisections
        self.name = name
        if metadata is not None:
            self.metadata = metadata
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def training_runs(self):
        """Gets the training_runs of this Task.  # noqa: E501


        :return: The training_runs of this Task.  # noqa: E501
        :rtype: list[TaskTrainingRuns]
        """
        return self._training_runs

    @training_runs.setter
    def training_runs(self, training_runs):
        """Sets the training_runs of this Task.


        :param training_runs: The training_runs of this Task.  # noqa: E501
        :type: list[TaskTrainingRuns]
        """
        if training_runs is None:
            raise ValueError("Invalid value for `training_runs`, must not be `None`")  # noqa: E501

        self._training_runs = training_runs

    @property
    def testing_runs(self):
        """Gets the testing_runs of this Task.  # noqa: E501


        :return: The testing_runs of this Task.  # noqa: E501
        :rtype: list[TaskTrainingRuns]
        """
        return self._testing_runs

    @testing_runs.setter
    def testing_runs(self, testing_runs):
        """Sets the testing_runs of this Task.


        :param testing_runs: The testing_runs of this Task.  # noqa: E501
        :type: list[TaskTrainingRuns]
        """
        if testing_runs is None:
            raise ValueError("Invalid value for `testing_runs`, must not be `None`")  # noqa: E501

        self._testing_runs = testing_runs

    @property
    def training_lumisections(self):
        """Gets the training_lumisections of this Task.  # noqa: E501


        :return: The training_lumisections of this Task.  # noqa: E501
        :rtype: list[TaskTrainingLumisections]
        """
        return self._training_lumisections

    @training_lumisections.setter
    def training_lumisections(self, training_lumisections):
        """Sets the training_lumisections of this Task.


        :param training_lumisections: The training_lumisections of this Task.  # noqa: E501
        :type: list[TaskTrainingLumisections]
        """
        if training_lumisections is None:
            raise ValueError("Invalid value for `training_lumisections`, must not be `None`")  # noqa: E501

        self._training_lumisections = training_lumisections

    @property
    def testing_lumisections(self):
        """Gets the testing_lumisections of this Task.  # noqa: E501


        :return: The testing_lumisections of this Task.  # noqa: E501
        :rtype: list[TaskTrainingLumisections]
        """
        return self._testing_lumisections

    @testing_lumisections.setter
    def testing_lumisections(self, testing_lumisections):
        """Sets the testing_lumisections of this Task.


        :param testing_lumisections: The testing_lumisections of this Task.  # noqa: E501
        :type: list[TaskTrainingLumisections]
        """
        if testing_lumisections is None:
            raise ValueError("Invalid value for `testing_lumisections`, must not be `None`")  # noqa: E501

        self._testing_lumisections = testing_lumisections

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501


        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def metadata(self):
        """Gets the metadata of this Task.  # noqa: E501

        Extra details that describe the Task  # noqa: E501

        :return: The metadata of this Task.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Task.

        Extra details that describe the Task  # noqa: E501

        :param metadata: The metadata of this Task.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def created(self):
        """Gets the created of this Task.  # noqa: E501


        :return: The created of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Task.


        :param created: The created of this Task.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Task.  # noqa: E501


        :return: The modified of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Task.


        :param modified: The modified of this Task.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
